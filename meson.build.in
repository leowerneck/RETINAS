project('RETINAS',
        @languages@,
        default_options : ['buildtype=plain'],
        version : '0.1.0',
        license : 'BSD-2-Clause license')

with_c = get_option('with-c')
with_cuda = get_option('with-cuda')
blas_lib = get_option('blas_lib')
precision = get_option('precision')

if precision == 'single'
  message('Single precision enabled')
  precision_flag = '-DPRECISION=0'
  fftw_dep_name = 'fftw3f'
  fftw_flavor = 'fftwf'
else
  message('Double precision enabled')
  precision_flag = '-DPRECISION=1'
  fftw_dep_name = 'fftw3'
  fftw_flavor = 'fftw'
endif

subdir('retinas')

if with_c or with_cuda
  # Set the libraries' header files
  install_headers(headers, subdir : 'retinas')
endif

# .-----------------.
# | C Library Build |
# .-----------------.
if get_option('with-c')

  message('Checking dependencies for C library')

  # The C compiler
  cc = meson.get_compiler('c')

  # C library dependencies
  dep_math = cc.find_library('m', required : true)

  ###################
  # FFTW dependency #
  ###################
  dep_fftw  = dependency(fftw_dep_name, required : true)

  fftw_types = ['@0@_complex', '@0@_plan']
  foreach type : fftw_types
    if not cc.has_type(type.format(fftw_flavor), prefix : '#include <fftw3.h>', dependencies : dep_fftw)
      error('FFTW3 library does not have type @0@'.format(func.format(fftw_flavor)))
    endif
  endforeach

  fftw_funcs = ['@0@_alloc_real' , '@0@_alloc_complex', '@0@_free',
                '@0@_plan_dft_2d', '@0@_destroy_plan' , '@0@_execute',
                '@0@_execute_dft', '@0@_cleanup']
  foreach func : fftw_funcs
    if not cc.has_function(func.format(fftw_flavor), prefix : '#include <fftw3.h>', dependencies : dep_fftw)
      error('FFTW3 library does not have function @0@'.format(func.format(fftw_flavor)))
    endif
  endforeach

  ###################
  # BLAS dependency #
  ###################
  dep_blas = dependency(blas_lib, disabler : true, required : false)
  if is_disabler(dep_blas)
    blas_opts = ['blas', 'openblas', 'blis']
    foreach blas : blas_opts
      dep_blas = dependency(blas, disabler : true, required : false)
      if not is_disabler(dep_blas)
        break
      endif
    endforeach
    if is_disabler(dep_blas)
      error('BLAS dependency not found')
    endif
  endif

  blas_funcs = ['cblas_cgemm', 'cblas_isamax', 'cblas_icamax',
                'cblas_zgemm', 'cblas_idamax', 'cblas_izamax']
  foreach func : blas_funcs
    if not cc.has_function(func, prefix : '#include <cblas.h>', dependencies : dep_blas)
      error('BLAS library does not have function @0@'.format(func))
    endif
  endforeach

  # The C library
  lib_c_srcs = [c_srcs]
  c_args = ['-O3', '-march=native', '-std=gnu99', precision_flag]
  lib_c = library('retinas', lib_c_srcs,
                  include_directories : [c_inc_dir],
                  implicit_include_directories : true,
                  dependencies : [dep_math, dep_fftw, dep_blas],
                  c_args : c_args,
                  install : true)
endif

# .--------------------.
# | CUDA Library Build |
# .--------------------.
if get_option('with-cuda')

  message('Checking dependencies for CUDA library')

  # The CUDA compiler
  nvcc = meson.get_compiler('cuda')

  # CUDA library dependencies
  dep_cuda = dependency('cuda', version : '>=10', modules : ['cublas', 'cufft'])

  # The CUDA library
  lib_cuda_srcs = [cuda_srcs]
  cuda_args = ['-Xptxas=-O3', '-arch=native', '-O3', '-Xcompiler=-march=native', precision_flag]
  lib_cuda = library('retinas_cuda', lib_cuda_srcs,
                     include_directories : [cuda_inc_dir],
                     implicit_include_directories : true,
                     dependencies : [dep_cuda],
                     cuda_args : cuda_args,
                     install : true)

endif
