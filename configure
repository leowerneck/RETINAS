#!/bin/sh
#
# configure
#
# (c) 2023, Leo Werneck
#
# This is RETINAS's configure script, which is responsible for ensuring users are
# able to compile, test, and install RETINAS on different systems.

pkg="RETINAS"
pkg_short="RETINAS"
pkg_version="1.0.0"
libname="retinas"

red()
{
    printf "\033[1m\033[31m$1\033[0m"
}

green()
{
    printf "\033[1m\033[32m$1\033[0m"
}

blue()
{
    printf "\033[1m\033[34m$1\033[0m"
}

YES()
{
    green "YES"
    if [ $# -eq 1 ]; then
        printf " ($1)\n"
    else
        printf "\n"
    fi
}

NO()
{
    red "NO"
    if [ $# -eq 1 ]; then
        printf " ($1)\n"
    else
        printf "\n"
    fi
}

error()
{
    red "ERROR: "
    printf "$1\n"
    exit 1
}

strip()
{
    ret=$(echo $1 | sed 's/^ *//; s/ *$//')
}

help_message()
{
    cat <<EOF
This is the configuration script for RETINAS
Syntax: ./configure [-h,--help] [-l,--license] [-r,--reconfigure] [-s,--silent]
                    [--prefix=<dir>] [--builddir=<dir>] [--buildtype=<type>]
                    [--with-c] [--without-c] [--with-cuda] [--without-cuda]
                    [--precision=<type>]
                    [--cflags="<flag1> <flag2>..."]
                    [--clibs="<lib1> <lib2>..."]
                    [--cudaflags="<flag1> <flag2>..."]
                    [--cudalibs="<lib1> <lib2>..."]
                    [--fftwdir=<dir>] [--fftwinc=<dir>] [--fftwlib=<dir>]
                    [--blasdir=<dir>] [--blasinc=<dir>] [--blaslib=<dir>]
Options:'
    -h,--help           Print this message and exit
    -l,--license        Print license information and exit
    -r,--reconfigure    Force overwrite of previous configuration
    -s,--silent         Generate a less verbose Makefile
    --prefix            Installation directory
    --builddir          Build directory (default build)
    --buildtype         Build type (default debug-opt). Supported values:
                          <type>     : C compiler flags
                          -----------:------------------
                          nocflags   : None
                          debug      : -Wall -std=c99 -O0 -g
                          debug-opt  : -Wall -std=c99 -march=native -O2 -g
                          opt        : -Wall -std=c99 -march=native -O2
                          production : -Wall -std=c99 -march=native -O3
    --with-c            Compile the C libraries (default)
    --without-c         Do not compile the C libraries
    --with-cuda         Compile the CUDA libraries
    --without-c         Do not compile the CUDA libraries
    --precision         Options are: both (default), single, or double
    --cflags            Additional flags for the C
    --clibs             Additional flags for the C linker
    --cudaflags         Additional flags for the CUDA compiler
    --cudalibs          Additional flags for the CUDA linker
    --fftwdir           Sets the FFTW base directory. Possible values:
                          <dir> : assumes <dir>/include and <dir>/lib exist
                                  (see --fftwinc and --fftwlib if not)
    --fftwinc           Sets the path to the FFTW include directory
    --fftwlib           Sets the path to the FFTW lib directory
    --blasdir           Sets the BLAS base directory. Possible values:
                          <dir> : assumes <dir>/include and <dir>/lib exist
                                  (see --blasinc and --blaslib if not)
    --blasinc           Sets the path to the BLAS include directory
    --blaslib           Sets the path to the BLAS lib directory
EOF
}

check_command()
{
    printf "Checking if command $1 exists... "
    tmp_=$(command -v $1)
    if [ "$tmp_" = "" ]; then
        NO
        eval have_$(printf $1 | tr - _)=0
        return 0
    else
        YES $tmp_
        eval have_$(printf $1 | tr - _)=1
        return 1
    fi
}

compiles()
{
    printf "$5"
    printf "$1" | $2 $3 -x c - $4 >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        YES "$2$3<objs>$4"
        rm -f a.out
        return 0
    fi
    NO "$2$3<objs>$4"
    rm -f a.out
    return 1
}

Realpath()
{
    echo $(cd $(dirname $1); pwd)/$(basename $1) | \
        awk '{gsub(/\/\.\./, "", $0); gsub(/\/\./, "", $0); print}'
}

NL='
'
probe_file()
{
    # Source: https://stackoverflow.com/questions/10346816
    tmp_=$(find $1 2>/dev/null | grep -F $2)
    # Source: https://unix.stackexchange.com/questions/276834
    case $tmp_ in
             "") return 1;;
        *"$NL"*) return 2;;
              *) return 0;;
    esac
}

silent=0
reconfigure=0
prefix="/usr/local"
buildtype="debug-opt"
builddir="build"
precision="both"
with_c=1
with_cuda=0
cflags=""
cudaflags=""
clibs=""
cudalibs=""
fftwdir=""
fftwinc=""
fftwlib=""
blasdir=""
blasinc=""
blaslib=""

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help) help_message; exit;;
        -l|--license)
            if [ -f LICENSE ]; then
                cat LICENSE; exit
            else
                printf "License file (LICENSE) does not exist\n"; exit
            fi
            ;;
        -r|--reconfigure) reconfigure=1;;
        -s|--silent) silent=1;;
        --with-c) with_c=1;;
        --without-c) with_c=0;;
        --with-cuda) with_cuda=1;;
        --without-cuda) with_cuda=0;;
        --prefix=*) prefix=$(echo "$1" | cut -d= -f2);;
        --buildtype=*) buildtype=$(echo "$1" | cut -d= -f2);;
        --precision=*) precision=$(echo "$1" | cut -d= -f2);;
        --builddir=*) builddir=$(echo "$1" | cut -d= -f2);;
        --cflags=*) cflags=$(echo "$1" | cut -d= -f2);;
        --clibs=*) clibs=$(echo "$1" | cut -d= -f2);;
        --cudaflags=*) cudalibs=$(echo "$1" | cut -d= -f2);;
        --cudalibs=*) cudalibs=$(echo "$1" | cut -d= -f2);;
        --fftwdir=*) fftwdir=$(echo "$1" | cut -d= -f2);;
        --fftwinc=*) fftwinc=$(echo "$1" | cut -d= -f2);;
        --fftwlib=*) fftwlib=$(echo "$1" | cut -d= -f2);;
        --blasdir=*) blasdir=$(echo "$1" | cut -d= -f2);;
        --blasinc=*) blasinc=$(echo "$1" | cut -d= -f2);;
        --blaslib=*) blaslib=$(echo "$1" | cut -d= -f2);;
        --prefix) prefix=$2; shift;;
        --buildtype) buildtype=$2; shift;;
        --precision) precision=$2; shift;;
        --builddir) builddir=$2; shift;;
        --cflags) cflags=$2; shift;;
        --clibs) clibs=$2; shift;;
        --cudalibs) cudalibs=$2; shift;;
        --cudalibs) clibs=$2; shift;;
        --fftwdir) fftwdir=$2; shift;;
        --fftwinc) fftwinc=$2; shift;;
        --fftwlib) fftwlib=$2; shift;;
        --blasdir) blasdir=$2; shift;;
        --blasinc) blasinc=$2; shift;;
        --blaslib) blaslib=$2; shift;;
        --) shift; break;;
        -*)
            opt=$1
            opt_length=$(echo "$opt" | awk '{print length}')
            for i in $(seq 2 "$opt_length"); do
                char=$(echo "$opt" | cut -c"$i")
                case $char in
                    h) help_message; exit;;
                    l)
                        if [ -f LICENSE ]; then
                            cat LICENSE; exit
                        else
                            printf "License file (LICENSE) does not exist\n"; exit
                        fi
                        ;;
                    r) reconfigure=1;;
                    s) silent=1;;
                    *) echo "Warning: ignoring unknown option: $char";;
                esac
            done
            ;;
        *) echo "Warning: ignoring unknown option: $1";;
    esac
    shift
done

if [ -f $builddir/.check ] && [ $reconfigure -eq 0 ]; then
    printf "Build directory '$builddir' exists. Stopping configuration.\n"
    printf "Run with -r or --reconfigure to force a new configuration.\n"
    exit 1
fi

printf "Beginning configuration script for $pkg...\n"
printf "Detecting system... "
unames=$(uname -s)
case $unames in
    Linux)  printf "%s\n" $(green "$unames"); break;;
    Darwin) printf "%s\n" $(green "$unames"); break;;
    *) printf "Unsupported system %s\n" $(red "$unames"); exit 1;;
esac

prefix=$(Realpath $prefix)

check_precision()
{
    if [ "$1" = "c" ]; then
        printf "Checking C library precision... "
    elif [ "$1" = "cuda" ]; then
        printf "Checking CUDA library precision... "
    else
        error "check_libs only supports c or cuda as arguments"
    fi

    case $precision in
        both) green "both\n"; break;;
        single) green "single\n"; break;;
        double) green "double\n"; break;;
        *) error "Unsupported precision $precision";;
    esac
}

check_flags()
{
    if [ "$1" == "c" ]; then
        flags="$cflags"
    elif [ "$1" == "cuda" ]; then
        flags="$cudaflags"
    else
        error "check_flags only supports c or cuda as arguments"
    fi

    printf "Checking if additional ${1}flags were provided... "
    if [ "$flags" = "" ]; then
        green "NO\n"
    else
        YES "$flags"
    fi
    strip "$2 $flags"
    flags=$ret
}

check_libs()
{
    if [ "$1" == "c" ]; then
        libs="$clibs"
    elif [ "$1" == "cuda" ]; then
        libs="$cudalibs"
    else
        error "check_libs only supports c or cuda as arguments"
    fi

    printf "Checking if additional ${1}libs were provided... "
    if [ "$libs" = "" ]; then
        green "NO\n"
    else
        YES "$libs"
    fi
    strip "$2 $libs"
    libs=$ret
}

check_compiler()
{
    printf "Checking if compiler $1 exists... "
    tmp_=$(command -v $1)
    if [ "$tmp_" = "" ]; then
        NO
        return 1
    fi
    YES "$tmp_"
    return 0
}

check_compilers()
{
    if [ "$1" == "c" ]; then
        if [ -z $CC ]; then tests="gcc clang icc icx cc"; else tests="$CC"; fi
        msg="Could not find a working C compiler. Please set the environment variable CC."
    elif [ "$1" == "cuda" ]; then
        if [ -z $NVCC ]; then tests="nvcc"; else tests="$NVCC"; fi
        MSG="COULD not find a working CUDA compiler. Please set the environment variable NVCC."
    else
        error "check_compilers only supports c or cuda as arguments"
    fi
    retcc="none"
    for compiler in $tests; do
        check_compiler $compiler
        if [ $? -eq 0 ]; then
            retcc=$compiler
            break;
        fi
    done
    if [ "$retcc" == "none" ]; then
        error "$msg"
    fi
}

check_build_type()
{
    if [ "$1" == "c" ]; then
        printf "Checking if C build type is valid... "
         case $buildtype in
             plain) buildflags=""; break;;
             debug) buildflags="-O0 -g"; break;;
             debug-opt) buildflags="-Wall -std=c99 -march=native -O2 -g"; break;;
             opt) buildflags="-Wall -std=c99 -march=native -O2"; break;;
             production) buildflags="-Wall -std=c99 -march=native -O3"; break;;
             *) printf "%s\nUnsupported built type, use ./configure -h for help\n" $(red $buildtype)
                exit 1;;
         esac
         YES "buildtype: $buildtype; build cflags: $buildflags"
    elif [ "$1" == "cuda" ]; then
        printf "Checking if CUDA build type is valid... "
        case $buildtype in
            plain) buildflags=""; break;;
            debug) buildflags="-O0 -g"; break;;
            debug-opt) buildflags="-Wall -std=c99 -march=native -O2 -g"; break;;
            opt) buildflags="-Wall -std=c99 -march=native -O2"; break;;
            production) buildflags="-Wall -std=c99 -march=native -O3"; break;;
            *) printf "%s\nUnsupported built type, use ./configure -h for help\n" $(red $buildtype)
               exit 1;;
        esac
        YES "buildtype: $buildtype; build cudaflags: $buildflags"
    else
        error "check_build_type only supports c or cuda as arguments"
    fi
}

check_lib()
{
    printf "Checking for $4 library... "
    if [ "$1" = "" ]; then
        if [ "$2" = "" ] && [ "$3" = "" ]; then
            if [ $have_pkg_config -eq 1 ]; then
                printf "using pkg-config... "
                incflags=$(pkg-config $4 --cflags 2>/dev/null)
                libflags=$(pkg-config $4 --libs --static 2>/dev/null)
                if [ "$incflags" != "" ] && [ "$libflags" != "" ]; then
                    green "FOUND\n"
                else
                    NO
                    red "ERROR: "
                    printf "$4 not found with pkg-config\n"
                    printf "Please use ./configure -h for instructions on how to manually\n"
                    printf "specify your $4 installation path.\n"
                    exit 1
                fi
            fi
        elif [ "$2" = "" ] || [ "$3" = "" ]; then
            error "For custom BLAS paths, both --$2 and --$3 must be given\n"
        else
            incflags="-I$2"
            libflags="-L$3 -l$4"
        fi
    else
        if [ ! -d $1 ]; then
            error "$4 directory $1 does not exist"
        fi
        green "User provided"
        printf " (incdir: $1/include; libdir: $1/lib)\n"
        incflags="-I${1}/include"
        libflags="-L${1}/lib -l$4"
    fi
}

check_c()
{
    check_precision c
    check_build_type c
    check_flags c "$buildflags"
    cbuildflags=$flags
    check_libs c
    cbuildlibs=$libs
    check_compilers c
    compiler=$retcc

    # Simplest program
    compiles "int main() { return 0; }" $compiler " -O0 " "" "Checking if C compiler works... "
    if [ $? -ne 0 ]; then
        error "The C compiler does not work with the most basic of programs"
    fi

    # Testing libm
    code='
#include <stdio.h>
#include <math.h>

int main() {
  printf("%%.15e\\n", cos(2.3456));
  return 0;
}
'
    compiles "$code" $compiler " -O0 " " -lm" "Checking if C compiler works with -lm linker flag... "
    if [ $? -ne 0 ]; then
        error "The C compiler does not work with libm"
    fi

    check_lib "$blasdir" "$blasinc" "$blaslib" "blas"
    blas_incflags=$incflags
    blas_libflags=$libflags

    # Test blas
    count=0
    for f in cblas_isamax cblas_icamax cblas_idamax cblas_izamax cblas_cgemm cblas_zgemm; do
        count=$((count+1))
        if [ $count -le 4 ]; then
            code="
#include <stdio.h>
#include <cblas.h>
int main() {
  return $f(1, NULL, 1);
}
"
        else
            code="
#include <stdio.h>
#include <cblas.h>
int main() {
  // Check for cblas_cgemm
  double alpha = 1;
  double beta  = 0;
  $f(CblasRowMajor, CblasNoTrans, CblasNoTrans, 1, 1, 1, &alpha, NULL, 1, NULL, 1, &beta, NULL, 1);
  return 0;
}
"
        fi
        compiles "$code" $compiler " -O0 $blas_incflags " " $blas_libflags" "Checking if blas library supports function $f... "
        if [ $? -ne 0 ]; then
            error "The blas library not support the function $f"
        fi
    done

    check_lib "$fftwdir" "$fftwinc" "$fftwlib" "fftw3"
    fftw_incflags=$incflags
    fftw_libflags=$libflags
    check_lib "$fftwdir" "$fftwinc" "$fftwlib" "fftw3f"
    fftwf_incflags=$incflags
    fftwf_libflags=$libflags
    strip "$cbuildflags $blas_incflags $fftw_incflags"
    cbuildflags=$ret
    strip "$cbuildlibs $blas_libflags $fftw_libflags"
    cbuildlibs=$ret
}

check_cuda()
{
    check_precision cuda
    check_flags cuda
    check_libs cuda
    check_compilers cuda
    check_build_type cuda
    compiler=$retcc
}

check_command pkg-config
printf "Checking if C library requested... "
if [ $with_c -eq 0 ]; then
    green "NO\n"
else
    YES
    check_c
    cc=$compiler
    ccflags=$cbuildflags
    cclibs=$cbuildlibs
fi

printf "Checking if CUDA library requested... "
if [ $with_cuda -eq 1 ]; then YES; check_cuda; else green "NO\n"; fi



# clibs=$(printf "%s" "-lm $clibs" | awk '{sub(/ *$/, "", $0); print}')
# c_compiles "$code" $CC " $cflags " " $clibs" "Checking if compiler works with build flags... "
# if [ $? -ne 0 ]; then
#     error "The C compiler does not work with the build flags\n"
# fi
# if [ "$ompcflag" != "" ]; then
#     code='
# #include <stdio.h>
# #include <omp.h>
# int main() {
#   #pragma omp parallel
#   {
#     printf("Hello, world!\\n");
#   }
#   return 0;
# }
# '
#     c_compiles "$code" $CC " -O0$ompcflag " " $clibs" "Checking if compiler works with$ompcflag flag... "
#     if [ $? -ne 0 ]; then
#         printf "Disabling OpenMP\n"
#         ompcflag=""
#     fi
# fi

# if [ $usehdf5 -eq 0 ]; then
#     cflags="$cflags -DGRHAYL_DISABLE_HDF5"
# else
#     if [ "$hdf5dir" = "" ]; then
#         if [ "$hdf5inc" = "" ] && [ "$hdf5lib" = "" ]; then
#             check_command pkg-config
#             if [ $have_pkg_config -eq 1 ]; then
#                 printf "Checking if hdf5 library is available with pkg-config... "
#                 hdf5inc=$(pkg-config hdf5 --cflags 2>/dev/null)
#                 hdf5lib=$(pkg-config hdf5 --libs --static 2>/dev/null)
#                 if [ "$hdf5inc" != "" ] && [ "$hdf5lib" != "" ]; then
#                     YES
#                     cflags="$cflags $hdf5inc"
#                     clibs="$clibs $hdf5lib"
#                 else
#                     NO
#                     red "ERROR: "
#                     printf "HDF5 not found with pkg-config\n"
#                     printf "Please use ./configure -h for instructions on how to manually\n"
#                     printf "specify your HDF5 installation path or disable HDF5\n"
#                     exit 1
#                 fi
#             fi
#         elif [ "$hdf5inc" = "" ] || [ "$hdf5lib" = "" ]; then
#             error "For custom HDF5 paths, both --hdf5inc and --hdf5lib must be given\n"
#         else
#             set_hdf5 "$hdf5inc" "$hdf5lib"
#             if [ $? -ne 0 ]; then
#                 error "HDF5 not found"
#             fi
#         fi
#     else
#         if [ ! -d $hdf5dir ]; then
#             error "HDF5 directory $hdf5dir does not exist"
#         fi
#         set_hdf5 "${hdf5dir}/include" "${hdf5dir}/lib"
#         if [ $? -ne 0 ]; then
#             error "HDF5 not found"
#         fi
#     fi
#     # Courtesy ChatGPT (comments removed)
#     code='
# #include <stdio.h>
# #include <stdlib.h>
# #include "hdf5.h"

# int main() {
#   hid_t file_id, dataset_id, dataspace_id;
#   herr_t status;
#   file_id = H5Fopen("test.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
#   if (file_id < 0) {
#     fprintf(stderr, "Failed to open HDF5 file!\\n");
#     exit(1);
#   }
#   dataset_id = H5Dopen2(file_id, "test_dataset", H5P_DEFAULT);
#   if (dataset_id < 0) {
#     fprintf(stderr, "Failed to open HDF5 dataset!\\n");
#     exit(1);
#   }
#   dataspace_id = H5Dget_space(dataset_id);
#   if (H5Sget_simple_extent_ndims(dataspace_id) != 2) {
#     fprintf(stderr, "Unexpected dataspace rank!\\n");
#     exit(1);
#   }
#   hsize_t dims[2];
#   status = H5Sget_simple_extent_dims(dataspace_id, dims, NULL);
#   if (status < 0 || dims[0] != 5 || dims[1] != 10) {
#     fprintf(stderr, "Unexpected dataspace dimensions!\\n");
#     exit(1);
#   }
#   status = H5Dclose(dataset_id);
#   status = H5Fclose(file_id);
#   printf("HDF5 installation is OK!\\n");
#   return 0;
# }
# '
#     c_compiles "$code" $CC " $cflags " " $clibs" "Checking if compiler works with hdf5... "
#     if [ $? -ne 0 ]; then
#         msg="C compiler does not work with hdf5. Use ./configure --nohdf5 to disable hdf5 or
#        run ./configure -h for more information on how to specify your hdf5 installation."
#         error "$msg"
#     fi
# fi

# parse_mcd()
# {
#     name=$(printf $2 | awk '{n=split($0, arr, "/"); print arr[n]}')
#     if [ "$3" = "0" ]; then
#         printf "$1- %s\n" $(blue $name)
#     elif [ "$3" = "1" ]; then
#         mkdir -p $(printf $2 | awk -v bd=$builddir '{sub(/^RETINAS\//, "", $0); printf("%s/%s", bd, $0)}')
#         printf "$1- %s\n" $(green $name)
#     else
#         mkdir -p $(printf $2 | awk -v bd=$builddir '{sub(/^RETINAS\//, "", $0); printf("%s/%s", bd, $0)}')
#         printf "$1- $name\n"
#     fi
#     file="$2/make.code.defn"
#     if [ ! -f $file ]; then
#         error "File $file not found"
#     fi
#     for sd in $(./scripts/parser awk $file "subdirs"); do
#         sdsrcs=$(./scripts/parser awk "$2/$sd/make.code.defn" "sources")
#         sdincs=$(./scripts/parser awk "$2/$sd/make.code.defn" "headers")
#         sdihds=$(./scripts/parser awk "$2/$sd/make.code.defn" "install_headers")
#         srcs="$srcs $sdsrcs"
#         incs="$incs $sdincs"
#         ihds="$ihds $sdihds"
#         parse_mcd "$1  " $2/$sd $(($3+1))
#     done
# }

# printf "Creating build directory tree (build directory: $builddir):\n"
# count=0
# srcs=""
# incs=""
# ihds=""
# parse_mcd "  " "RETINAS" 0
# printf "Symlinking header files in RETINAS/include to $builddir/include... "
# rm -f $builddir/include/*
# ln -s `pwd`/RETINAS/include/*.h $builddir/include
# green "DONE\n"
# printf "Creating directory $builddir/lib... "
# mkdir -p $builddir/lib
# green "DONE\n"
# printf "Auto-generated by RETINAS's configuration script\n" > $builddir/.check

# # Sanitize all white space (not really necessary)
# cflags=$(printf "%s" "$cflags" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
# clibs=$(printf "%s" "$clibs" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
# srcs=$(printf "$srcs" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
# incs=$(printf "$incs" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
# ihds=$(printf "$ihds" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
# objs=$(printf "$srcs" | awk -v bd=$builddir '{gsub("RETINAS/", sprintf("%s/", bd), $0); gsub(/\.c/, ".o", $0); print}')
# tests=$(find Unit_Tests -name unit_test_*.c)
# if [ "$tests" = "" ]; then
#     tnames="None"
# else
#     tnames=$(printf "$tests" | sort | \
#                 awk '{
#   split($0, a, "/")
#   sub(/^unit_test_/, "", a[2])
#   sub(/\.c/, "", a[2])
#   if( NR == 1 )
#     print "-", a[2]
#   else
#     printf("%26s- %s\n", " ", a[2])
# }
# END { print tests }
# ')
#     tests=$(echo $tests)
#     tsrcs=$(echo $(find Unit_Tests -name *.c ! -name unit_test_*.c))
#     tobjs=$(printf "$tsrcs" | awk '{
#     gsub(/\.c/, ".o", $0)
#     for(i=1;i<=NF;i++) {
#       tobjs=sprintf("%s%s%s ", tobjs, "build/", $i)
#     }
#     print tobjs
# }')
#     texes=$(printf "$tests" | awk '{ gsub(/\.c/, "", $0); gsub(/Unit_Tests\//, "test/", $0); print }')
#     texeobjs=$(printf "$tests" | awk '{ gsub(/\.c/, ".o", $0); gsub(/Unit_Tests\//, "build/Unit_Tests/", $0); print }')
#     mkdir -p $builddir/Unit_Tests test
# fi

# printf "Generating Makefile... "
# rm -f Makefile
# printf "# Makefile automatically generated by $pkg's configure script\n" > Makefile
# printf "PREFIX       = $prefix\n"                                       >> Makefile
# printf "BUILDDIR     = $builddir\n"                                     >> Makefile
# printf "LIBSOV       = lib${libname}_${pkg_version}$sharedext\n"        >> Makefile
# printf "LIBSO        = lib$libname$sharedext\n"                         >> Makefile
# printf 'BUILDLIBSOV  = $(BUILDDIR)/lib/$(LIBSOV)\n'                     >> Makefile
# printf 'BUILDLIBSO   = $(BUILDDIR)/lib/$(LIBSO)\n'                      >> Makefile
# printf 'PREFIXLIBSOV = $(PREFIX)/lib/$(LIBSOV)\n'                       >> Makefile
# printf 'PREFIXLIBSO  = $(PREFIX)/lib/$(LIBSO)\n'                        >> Makefile
# printf "CC           = $CC\n"                                           >> Makefile
# printf "CFLAGS       = $cflags -I./RETINAS/include\n"                    >> Makefile
# printf "CCOMPILE     = \$(CC) \$(CFLAGS)\n"                             >> Makefile
# printf "CCOMPILEOMP  = \$(CC) \$(CFLAGS)$ompcflag\n"                    >> Makefile
# printf "LD_FLAGS     = $clibs\n"                                        >> Makefile
# printf "SRC          = $srcs\n"                                         >> Makefile
# printf "OBJ          = $objs\n"                                         >> Makefile
# printf "INCS         = $incs\n"                                         >> Makefile
# printf "IHDS         = $ihds\n"                                         >> Makefile
# printf 'INC         := $(INCS) $(IHDS)\n'                               >> Makefile
# printf 'LIBS         = $(BUILDLIBSO)\n'                                 >> Makefile
# if [ "$tests" != "" ]; then
#     printf "TEXES    = $texes\n"      >> Makefile
#     printf "TOBJS    = $tobjs\n"      >> Makefile
#     printf "TEXEOBJS = $texeobjs\n\n" >> Makefile
# fi
# printf '\nall: grhayl tests\n\t@echo "All done!"\n\n' >> Makefile
# printf 'grhayl: $(LIBS)\n\n'                          >> Makefile
# printf 'tests: $(TEXES)\n\n'                          >> Makefile
# if [ $silent -eq 0 ]; then
#     printf '$(BUILDLIBSO): $(BUILDLIBSOV)\n'                                         >> Makefile
#     printf '\trm -f $(BUILDLIBSO) && ln -s $(LIBSOV) $(BUILDLIBSO)\n\n'              >> Makefile
#     printf '$(BUILDLIBSOV): $(OBJ)\n'                                                >> Makefile
#     printf '\t$(CCOMPILE) -fPIC -shared $(OBJ) -o $@ $(LD_FLAGS)\n\n'                >> Makefile
#     printf '$(OBJ): $(BUILDDIR)/%%.o : RETINAS/%%.c $(INC)\n'                         >> Makefile
#     printf '\t$(CCOMPILE) -fPIC -c $< -o $@\n\n'                                     >> Makefile
#     printf 'clean:\n\trm -f $(OBJ) $(TEXES) $(TOBJS) $(BUILDLIBSO) $(BUILDLIBSOV)\n' >> Makefile
#     printf 'realclean: clean\n\trm -rf $(BUILDDIR)\n\trm -f Makefile\n\n'            >> Makefile
#     if [ "$tests" != "" ]; then
#         printf '$(TEXES): test/%%: $(BUILDDIR)/Unit_Tests/%%.o $(TOBJS) $(LIBS)\n'             >> Makefile
#         printf '\t$(CCOMPILEOMP) $(TOBJS) $< -o $@ $(LD_FLAGS) -L$(BUILDDIR)/lib -lgrhayl\n\n' >> Makefile
#         printf '$(TOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                            >> Makefile
#         printf '\t$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
#         printf '$(TEXEOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                         >> Makefile
#         printf '\t$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
#     fi
# else
#     printf '$(BUILDLIBSO): $(BUILDLIBSOV)\n'                             >> Makefile
#     printf '\t@echo "Creating symlink to $@"\n'                          >> Makefile
#     printf '\t@rm -f $(BUILDLIBSO) && ln -s $(LIBSOV) $(BUILDLIBSO)\n\n' >> Makefile
#     printf '$(BUILDLIBSOV): $(OBJ)\n'                                    >> Makefile
#     printf '\t@echo "Linking RETINAS shared library"\n'                   >> Makefile
#     printf '\t@$(CCOMPILE) -fPIC -shared $(OBJ) -o $@ $(LD_FLAGS)\n\n'   >> Makefile
#     printf '$(OBJ): $(BUILDDIR)/%%.o : RETINAS/%%.c $(INC)\n'             >> Makefile
#     printf '\t@echo "Compiling $<"\n'                                    >> Makefile
#     printf '\t@$(CCOMPILE) -fPIC -c $< -o $@\n\n'                        >> Makefile
#     printf 'clean:\n\t@echo "Removing object files"\n'                   >> Makefile
#     printf '\t@rm -f $(OBJ)\n'                                           >> Makefile
#     printf '\t@echo "Removing library files"\n'                          >> Makefile
#     printf '\t@rm -f $(BUILDLIBSO) $(BUILDLIBSOV)\n'                     >> Makefile
#     printf '\t@echo "Removing unit tests"\n'                             >> Makefile
#     printf '\t@rm -f $(TEXES) $(TOBJS)\n\n'                              >> Makefile
#     printf 'realclean: clean\n\t@echo "Removing build directory"\n'      >> Makefile
#     printf '\t@rm -rf $(BUILDDIR)\n'                                     >> Makefile
#     printf '\t@echo "Removing Makefile"\n'                               >> Makefile
#     printf '\t@rm -f Makefile\n\n'                                       >> Makefile
#     if [ "$tests" != "" ]; then
#         printf '$(TEXES): test/%%: $(BUILDDIR)/Unit_Tests/%%.o $(TOBJS) $(LIBS)\n'              >> Makefile
#         printf '\t@echo "Linking $@"\n'                                                         >> Makefile
#         printf '\t@$(CCOMPILEOMP) $(TOBJS) $< -o $@ $(LD_FLAGS) -L$(BUILDDIR)/lib -lgrhayl\n\n' >> Makefile
#         printf '$(TOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                             >> Makefile
#         printf '\t@echo "Compiling $<"\n'                                                       >> Makefile
#         printf '\t@$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
#         printf '$(TEXEOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                          >> Makefile
#         printf '\t@echo "Compiling $<"\n'                                                       >> Makefile
#         printf '\t@$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
#     fi
# fi
# printf 'install: grhayl\n'                                                     >> Makefile
# printf '\t@echo "Installing RETINAS in $(PREFIX)..."\n'                         >> Makefile
# printf '\t@echo "Installing RETINAS headers in $(PREFIX)/include/grhayl"\n'     >> Makefile
# printf '\t@mkdir -p $(PREFIX)/include/grhayl\n'                                >> Makefile
# printf '\t@cp $(IHDS) $(PREFIX)/include/grhayl\n'                              >> Makefile
# printf '\t@echo "Installing RETINAS libraries in $(PREFIX)/lib"\n'              >> Makefile
# printf '\t@mkdir -p $(PREFIX)/lib\n'                                           >> Makefile
# printf '\t@cp -a $(BUILDDIR)/lib/* $(PREFIX)/lib\n\n'                          >> Makefile
# printf 'uninstall:\n'                                                          >> Makefile
# printf '\t@echo "Uninstalling RETINAS from $(PREFIX)..."\n'                     >> Makefile
# printf '\t@echo "Uninstalling RETINAS headers from $(PREFIX)/include/grhayl"\n' >> Makefile
# printf '\t@rm -rf $(PREFIX)/include/grhayl\n'                                  >> Makefile
# printf '\t@echo "Uninstalling RETINAS libraries from $(PREFIX)/lib"\n'          >> Makefile
# printf '\t@rm -rf $(PREFIXLIBSO) $(PREFIXLIBSOV)\n\n'                          >> Makefile
# green "DONE\n"

tmp=$(printf "$pkg_short configuration finished successfully")
sep=$(printf "%*s" "${#tmp}" " " | tr " " -)
printf "%s\n" $sep
printf "$tmp\n\n"
printf "%2sConfiguration information\n" " "
printf "%2s-------------------------\n" " "
printf "%4s%-24s : %s\n" " " "Version" $pkg_version
printf "%4s%-24s : %s\n" " " "Installation prefix" $prefix
printf "%4s%-24s : %s\n" " " "Build directory" $(Realpath $builddir)
printf "%4s%-24s : " " " "Build C library?"
if [ $with_c -eq 0 ]; then
    echo "No"
else
    echo "Yes"
    printf "%6s%-22s : %s\n" " " "C build type" $buildtype
    printf "%6s%-22s : %s\n" " " "C compiler flags" "$ccflags"
    printf "%6s%-22s : %s\n" " " "C linking flags" "$cclibs"
    printf "%6s%-22s : %s\n" " " "C library precision" $precision
fi
printf "%4s%-24s : " " " "Build CUDA library?"
if [ $with_c -eq 0 ]; then
    echo "No"
else
    echo "Yes"
    printf "%6s%-22s : %s\n" " " "CUDA build type" $buildtype
    printf "%6s%-22s : %s\n" " " "CUDA compiler flags" "$nvccflags"
    printf "%6s%-22s : %s\n" " " "CUDA linking flags" "$nvcclibs"
    printf "%6s%-22s : %s\n" " " "CUDA library precision" $precision
fi
if [ $silent -eq 0 ]; then
    printf "%4s%-24s : %s\n" " " "Silent Makefile" "No"
else
    printf "%4s%-24s : %s\n" " " "Silent Makefile" "Yes"
fi
printf "%s\n" $sep
