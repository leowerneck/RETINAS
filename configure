#!/bin/sh
#
# configure
#
# (c) 2023, Leo Werneck
#
# This is the configure script for RETINAS, which is responsible for ensuring users are
# able to compile, test, and install RETINAS on different systems.

pkg="RETINAS"
pkg_short="RETINAS"
pkg_version="1.0.0"
libname="retinas"

red()
{
    printf "\033[1m\033[31m$1\033[0m"
}

green()
{
    printf "\033[1m\033[32m$1\033[0m"
}

blue()
{
    printf "\033[1m\033[34m$1\033[0m"
}

YES()
{
    green "YES"
    if [ $# -eq 1 ]; then
        printf " ($1)\n"
    else
        printf "\n"
    fi
}

NO()
{
    red "NO"
    if [ $# -eq 1 ]; then
        printf " ($1)\n"
    else
        printf "\n"
    fi
}

error()
{
    red "ERROR: "
    printf "$1\n"
    exit 1
}

help_message()
{
    cat <<EOF
This is the configuration script for $pkg
Syntax: ./configure [-h,--help] [-l,--license] [-r,--reconfigure] [-s,--silent]
                    [--prefix=<dir>] [--builddir=<dir>]
                    [--with-c=yes|no] [--with-cuda=yes|no]
                    [--cflags="<flag1> <flag2>..."]
                    [--cudaflags="<flag1> <flag2>..."]
                    [--libs="<lib1> <lib2>..."]
Options:
    -h,--help           Print this message and exit
    -l,--license        Print license information and exit
    -r,--reconfigure    Force overwrite of previous configuration
    -s,--silent         Generate a less verbose Makefile
    --prefix            Installation directory
    --builddir          Build directory (default build)
    --with-c            Whether or not to build the C library (default yes)
    --with-cuda         Whether or not to build the CUDA library (default no)
    --cflags            Additional flags for the C compiler
    --cudaflags         Additional flags for the CUDA compiler
    --libs              Additional flags for the linker
EOF
}

check_command()
{
    printf "Checking if command $1 exists... "
    tmp_=$(command -v $1)
    if [ "$tmp_" = "" ]; then
        NO
        eval have_$(printf $1 | tr - _)=0
        return 0
    else
        YES $tmp_
        eval have_$(printf $1 | tr - _)=1
        return 1
    fi
}

check_compiler()
{
    printf "Checking if compiler $1 exists... "
    tmp_=$(command -v $1)
    if [ "$tmp_" = "" ]; then
        NO
    else
        CC=$1
        YES "$tmp_"
    fi
}

c_compiles()
{
    printf "$5"
    printf "$1" | $2 $3 -x c - $4 >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        YES "$2 $3 <objs> $4"
        rm -f a.out
        return 0
    else
        NO "$2 $3 <objs> $4"
        rm -f a.out
        return 1
    fi
}

Realpath()
{
    echo $(cd $(dirname $1); pwd)/$(basename $1) | \
        awk '{gsub(/\/\.\./, "", $0); gsub(/\/\./, "", $0); print}'
}

NL='
'
probe_file()
{
    # Source: https://stackoverflow.com/questions/10346816
    tmp_=$(find $1 2>/dev/null | grep -F $2)
    # Source: https://unix.stackexchange.com/questions/276834
    case $tmp_ in
             "") return 1;;
        *"$NL"*) return 2;;
              *) return 0;;
    esac
}

check_fftw()
{
    code_fftwf='
#include <stdio.h>
#include <fftw3.h>
int main() {
  int N = 8;
  double* input = fftwf_malloc(sizeof(double) * N);
  fftwf_complex* output = fftwf_malloc(sizeof(fftwf_complex) * (N/2 + 1));
  fftwf_plan plan = fftwf_plan_dft_r2c_1d(N, input, output, FFTW_ESTIMATE);
  for(int i=0;i<N;i++) input[i] = i;
  fftwf_execute(plan);
  for(int i=0;i<N/2+1;i++)
    printf("%f + %fi, ", output[i][0], output[i][1]);
  fftwf_destroy_plan(plan);
  fftwf_free(input);
  fftwf_free(output);
  return 0;
}'
    code_fftw=$(echo "$code_fftwf" | sed 's/fftwf/fftw/g')
    c_compiles "$code_fftw" $CC "$BUILDCFLAGS" "${BUILDCLIBS#-lfftw3} -lfftw3" "Checking if C compiler works with fftw3... "
    c_compiles "$code_fftwf" $CC "$BUILDCFLAGS" "${BUILDCLIBS#-lfftw3f} -lfftw3f" "Checking if C compiler works with fftw3f... "
}

check_cblas_isaminmax()
{
    code='
#include <stdio.h>
#include <cblas.h>
int main() {
  int n = 3;
  float x[3] = {1.0, 2.0, 3.0};
  int result = cblas_isamin(n, x, 1);
  printf("Result: %d", result);
  return 0;
}'
    c_compiles "$code" $CC "$BUILDCFLAGS" "$BUILDCLIBS" "Checking if function cblas_isamin is available... "
    if [ $? -ne 0 ]; then
        error "Function cblas_isamin is required. Please use a different BLAS installation."
    fi
    code=$(echo "$code" | sed 's/cblas_isamin/cblas_isamax/')
    c_compiles "$code" $CC "$BUILDCFLAGS" "$BUILDCLIBS" "Checking if function cblas_isamax is available... "
    if [ $? -ne 0 ]; then
        error "Function cblas_isamax is required. Please use a different BLAS installation."
    fi
}

check_cblas_idaminmax()
{
    code='
#include <stdio.h>
#include <cblas.h>
int main() {
  int n = 3;
  double x[3] = {1.0, 2.0, 3.0};
  int result = cblas_idamin(n, x, 1);
  printf("Result: %d", result);
  return 0;
}'
    c_compiles "$code" $CC "$BUILDCFLAGS" "$BUILDCLIBS" "Checking if function cblas_idamin is available... "
    if [ $? -ne 0 ]; then
        error "Function cblas_idamin is required. Please use a different BLAS installation."
    fi
    code=$(echo "$code" | sed 's/cblas_idamin/cblas_idamax/')
    c_compiles "$code" $CC "$BUILDCFLAGS" "$BUILDCLIBS" "Checking if function cblas_idamax is available... "
    if [ $? -ne 0 ]; then
        error "Function cblas_idamax is required. Please use a different BLAS installation."
    fi
}

check_cblas_czgemm()
{
    code='
#include <stdio.h>
#include <cblas.h>
int main() {
  int m=2;
  float alpha=1, beta=0;
  float A[] = {1, 2, 3, 4};
  float B[] = {5, 6, 7, 8};
  float C[] = {0, 0, 0, 0};
  cblas_cgemm(CblasColMajor, CblasNoTrans, CblasNoTrans,
              m, m, m, &alpha, A, m, B, m, &beta, C, m);
  printf("Result: %e %e %e %e", C[0], C[1], C[2], C[3]);
  return 0;
}'
    c_compiles "$code" $CC "$BUILDCFLAGS" "$BUILDCLIBS" "Checking if function cblas_cgemm is available... "
    if [ $? -ne 0 ]; then
        error "Function cblas_cgemm is required. Please use a different BLAS installation."
    fi
    code=$(echo "$code" | sed 's/float/double/; s/cblas_cgemm/cblas_zgemm/')
    c_compiles "$code" $CC "$BUILDCFLAGS" "$BUILDCLIBS" "Checking if function cblas_zgemm is available... "
    if [ $? -ne 0 ]; then
        error "Function cblas_zgemm is required. Please use a different BLAS installation."
    fi
}

check_blas()
{
    check_cblas_isaminmax
    check_cblas_idaminmax
    check_cblas_czgemm
}

silent=0
reconfigure=0
prefix="/usr/local"
buildtype="debug-opt"
builddir="build"
with_c="yes"
with_cuda="no"
cflags=""
cudaflags=""
libs=""

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help) help_message; exit;;
        -l|--license)
            if [ -f LICENSE ]; then
                cat LICENSE; exit
            else
                printf "License file (LICENSE) does not exist\n"; exit
            fi
            ;;
        -r|--reconfigure) reconfigure=1;;
        -s|--silent) silent=1;;
        --prefix=*) prefix=$(echo "$1" | cut -d= -f2);;
        --builddir=*) builddir=$(echo "$1" | cut -d= -f2);;
        --cflags=*) cflags=$(echo "$1" | cut -d= -f2);;
        --cudaflags=*) cudaflags=$(echo "$1" | cut -d= -f2);;
        --libs=*) libs=$(echo "$1" | cut -d= -f2);;
        --with-c=*) with_c=$(echo "$1" | cut -d= -f2);;
        --with-cuda=*) with_cuda=$(echo "$1" | cut -d= -f2);;
        --prefix) prefix=$2; shift;;
        --builddir) builddir=$2; shift;;
        --cflags) cflags=$2; shift;;
        --cudaflags) cudaflags=$2; shift;;
        --libs) libs=$2; shift;;
        --with-c) with_c=$2; shift;;
        --with-cuda) with_cuda=$2; shift;;
        --) shift; break;;
        -*)
            opt=$1
            opt_length=$(echo "$opt" | awk '{print length}')
            for i in $(seq 2 "$opt_length"); do
                char=$(echo "$opt" | cut -c"$i")
                case $char in
                    h) help_message; exit;;
                    l)
                        echo "HERE: $1"
                        if [ -f LICENSE ]; then
                            cat LICENSE; exit
                        else
                            printf "License file (LICENSE) does not exist\n"; exit
                        fi
                        ;;
                    r) reconfigure=1;;
                    s) silent=1;;
                    *) echo "Warning: ignoring unknown option: $char";;
                esac
            done
            ;;
        *) echo "Warning: ignoring unknown option: $1";;
    esac
    shift
done

printf "Beginning configuration script for $pkg...\n"

if [ -f $builddir/.check ] && [ $reconfigure -eq 0 ]; then
    printf "Build directory '$builddir' exists. Stopping configuration.\n"
    printf "Run with -r or --reconfigure to force a new configuration.\n"
    exit 1
fi

prefix=$(Realpath $prefix)

BUILDCUDAFLAGS="-O2 -march=native -Wall"

if [ "$with_c" = "yes" ]; then
    if [ -z $CC ]; then
        echo "C compiler (CC) not specified, auto-detecting..."
        for compiler in gcc clang icc icx cc; do
            if [ -z $CC ]; then
                check_compiler $compiler
            else
                break
            fi
        done
    fi

    printf "Checking if additional C flags were provided... "
    if [ "$cflags" = "" ]; then
        green "NO\n"
    else
        YES "$cflags"
    fi

    BUILDCFLAGS="-O2 -march=native -Wall $cflags"
    BUILDCLIBS="-lm $libs"
    if [ "${BUILDCLIBS#-l*blas}" = "$BUILDCLIBS" ]; then
        BUILDCLIBS="$BUILDCLIBS -lcblas"
    fi
    check_fftw
    check_blas

fi

# if [ "$with_cuda" = "yes" ]; then
#     printf "Checking if additional CUDA flags were provided... "
#     if [ "$cudaflags" = "" ]; then
#         green "NO\n"
#     else
#         YES "$cudaflags"
#     fi
#     cudaflags="$BUILDCUDAFLAGS $cudaflags"
# fi

# printf "Checking if additional linker flags were provided... "
# if [ "$libs" = "" ]; then
#     green "NO\n"
# else
#     YES "$libs"
# fi

# if [ -z $CC ]; then
#     echo "C compiler (CC) not specified, auto-detecting..."
#     for compiler in gcc clang icc icx cc; do
#         if [ -z $CC ]; then
#             check_compiler $compiler
#         else
#             break
#         fi
#     done
# fi

# c_compiles "int main() { return 0; }" $CC " -O0 " "" "Checking if C compiler works... "
# code='
# #include <stdio.h>
# #include <math.h>

# int main() {
#   printf("%%.15e\\n", cos(2.3456));
#   return 0;
# }
# '
# c_compiles "$code" $CC " -O0 " " -lm" "Checking if compiler works with -lm linker flag... "
# if [ $? -ne 0 ]; then
#     error "The C compiler does not work with libm\n"
# fi
# c_compiles "$code" $CC " $cflags " " $clibs" "Checking if compiler works with build flags... "
# if [ $? -ne 0 ]; then
#     error "The C compiler does not work with the build flags\n"
# fi
# if [ "$ompcflag" != "" ]; then
#     code='
# #include <stdio.h>
# #include <omp.h>
# int main() {
#   #pragma omp parallel
#   {
#     printf("Hello, world!\\n");
#   }
#   return 0;
# }
# '
#     c_compiles "$code" $CC " -O0$ompcflag " " $clibs" "Checking if compiler works with$ompcflag flag... "
#     if [ $? -ne 0 ]; then
#         printf "Disabling OpenMP\n"
#         ompcflag=""
#     fi
# fi

# if [ $usehdf5 -eq 0 ]; then
#     cflags="$cflags -DGRHAYL_DISABLE_HDF5"
# else
#     if [ "$hdf5dir" = "" ]; then
#         if [ "$hdf5inc" = "" ] && [ "$hdf5lib" = "" ]; then
#             check_command pkg-config
#             if [ $have_pkg_config -eq 1 ]; then
#                 printf "Checking if hdf5 library is available with pkg-config... "
#                 hdf5inc=$(pkg-config hdf5 --cflags 2>/dev/null)
#                 hdf5lib=$(pkg-config hdf5 --libs --static 2>/dev/null)
#                 if [ "$hdf5inc" != "" ] && [ "$hdf5lib" != "" ]; then
#                     YES
#                     cflags="$cflags $hdf5inc"
#                     clibs="$clibs $hdf5lib"
#                 else
#                     NO
#                     red "ERROR: "
#                     printf "HDF5 not found with pkg-config\n"
#                     printf "Please use ./configure -h for instructions on how to manually\n"
#                     printf "specify your HDF5 installation path or disable HDF5\n"
#                     exit 1
#                 fi
#             fi
#         elif [ "$hdf5inc" = "" ] || [ "$hdf5lib" = "" ]; then
#             error "For custom HDF5 paths, both --hdf5inc and --hdf5lib must be given\n"
#         else
#             set_hdf5 "$hdf5inc" "$hdf5lib"
#             if [ $? -ne 0 ]; then
#                 error "HDF5 not found"
#             fi
#         fi
#     else
#         if [ ! -d $hdf5dir ]; then
#             error "HDF5 directory $hdf5dir does not exist"
#         fi
#         set_hdf5 "${hdf5dir}/include" "${hdf5dir}/lib"
#         if [ $? -ne 0 ]; then
#             error "HDF5 not found"
#         fi
#     fi
#     # Courtesy ChatGPT (comments removed)
#     code='
# #include <stdio.h>
# #include <stdlib.h>
# #include "hdf5.h"

# int main() {
#   hid_t file_id, dataset_id, dataspace_id;
#   herr_t status;
#   file_id = H5Fopen("test.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
#   if (file_id < 0) {
#     fprintf(stderr, "Failed to open HDF5 file!\\n");
#     exit(1);
#   }
#   dataset_id = H5Dopen2(file_id, "test_dataset", H5P_DEFAULT);
#   if (dataset_id < 0) {
#     fprintf(stderr, "Failed to open HDF5 dataset!\\n");
#     exit(1);
#   }
#   dataspace_id = H5Dget_space(dataset_id);
#   if (H5Sget_simple_extent_ndims(dataspace_id) != 2) {
#     fprintf(stderr, "Unexpected dataspace rank!\\n");
#     exit(1);
#   }
#   hsize_t dims[2];
#   status = H5Sget_simple_extent_dims(dataspace_id, dims, NULL);
#   if (status < 0 || dims[0] != 5 || dims[1] != 10) {
#     fprintf(stderr, "Unexpected dataspace dimensions!\\n");
#     exit(1);
#   }
#   status = H5Dclose(dataset_id);
#   status = H5Fclose(file_id);
#   printf("HDF5 installation is OK!\\n");
#   return 0;
# }
# '
#     c_compiles "$code" $CC " $cflags " " $clibs" "Checking if compiler works with hdf5... "
#     if [ $? -ne 0 ]; then
#         msg="C compiler does not work with hdf5. Use ./configure --nohdf5 to disable hdf5 or
#        run ./configure -h for more information on how to specify your hdf5 installation."
#         error "$msg"
#     fi
# fi

# parse_mcd()
# {
#     name=$(printf $2 | awk '{n=split($0, arr, "/"); print arr[n]}')
#     if [ "$3" = "0" ]; then
#         printf "$1- %s\n" $(blue $name)
#     elif [ "$3" = "1" ]; then
#         mkdir -p $(printf $2 | awk -v bd=$builddir '{sub(/^GRHayL\//, "", $0); printf("%s/%s", bd, $0)}')
#         printf "$1- %s\n" $(green $name)
#     else
#         mkdir -p $(printf $2 | awk -v bd=$builddir '{sub(/^GRHayL\//, "", $0); printf("%s/%s", bd, $0)}')
#         printf "$1- $name\n"
#     fi
#     file="$2/make.code.defn"
#     if [ ! -f $file ]; then
#         error "File $file not found"
#     fi
#     for sd in $(./scripts/parser awk $file "subdirs"); do
#         sdsrcs=$(./scripts/parser awk "$2/$sd/make.code.defn" "sources")
#         sdincs=$(./scripts/parser awk "$2/$sd/make.code.defn" "headers")
#         sdihds=$(./scripts/parser awk "$2/$sd/make.code.defn" "install_headers")
#         srcs="$srcs $sdsrcs"
#         incs="$incs $sdincs"
#         ihds="$ihds $sdihds"
#         parse_mcd "$1  " $2/$sd $(($3+1))
#     done
# }

# printf "Creating build directory tree (build directory: $builddir):\n"
# count=0
# srcs=""
# incs=""
# ihds=""
# parse_mcd "  " "GRHayL" 0
# printf "Symlinking header files in GRHayL/include to $builddir/include... "
# rm -f $builddir/include/*
# ln -s `pwd`/GRHayL/include/*.h $builddir/include
# green "DONE\n"
# printf "Creating directory $builddir/lib... "
# mkdir -p $builddir/lib
# green "DONE\n"
# printf "Auto-generated by GRHayL's configuration script\n" > $builddir/.check

# # Sanitize all white space (not really necessary)
# cflags=$(printf "%s" "$cflags" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
# clibs=$(printf "%s" "$clibs" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
# srcs=$(printf "$srcs" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
# incs=$(printf "$incs" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
# ihds=$(printf "$ihds" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
# objs=$(printf "$srcs" | awk -v bd=$builddir '{gsub("GRHayL/", sprintf("%s/", bd), $0); gsub(/\.c/, ".o", $0); print}')
# tests=$(find Unit_Tests -name unit_test_*.c)
# if [ "$tests" = "" ]; then
#     tnames="None"
# else
#     tnames=$(printf "$tests" | sort | \
#                 awk '{
#   split($0, a, "/")
#   sub(/^unit_test_/, "", a[2])
#   sub(/\.c/, "", a[2])
#   if( NR == 1 )
#     print "-", a[2]
#   else
#     printf("%26s- %s\n", " ", a[2])
# }
# END { print tests }
# ')
#     tests=$(echo $tests)
#     tsrcs=$(echo $(find Unit_Tests -name *.c ! -name unit_test_*.c))
#     tobjs=$(printf "$tsrcs" | awk '{
#     gsub(/\.c/, ".o", $0)
#     for(i=1;i<=NF;i++) {
#       tobjs=sprintf("%s%s%s ", tobjs, "build/", $i)
#     }
#     print tobjs
# }')
#     texes=$(printf "$tests" | awk '{ gsub(/\.c/, "", $0); gsub(/Unit_Tests\//, "test/", $0); print }')
#     texeobjs=$(printf "$tests" | awk '{ gsub(/\.c/, ".o", $0); gsub(/Unit_Tests\//, "build/Unit_Tests/", $0); print }')
#     mkdir -p $builddir/Unit_Tests test
# fi

# printf "Generating Makefile... "
# rm -f Makefile
# printf "# Makefile automatically generated by $pkg's configure script\n" > Makefile
# printf "PREFIX       = $prefix\n"                                       >> Makefile
# printf "BUILDDIR     = $builddir\n"                                     >> Makefile
# printf "LIBSOV       = lib${libname}_${pkg_version}$sharedext\n"        >> Makefile
# printf "LIBSO        = lib$libname$sharedext\n"                         >> Makefile
# printf 'BUILDLIBSOV  = $(BUILDDIR)/lib/$(LIBSOV)\n'                     >> Makefile
# printf 'BUILDLIBSO   = $(BUILDDIR)/lib/$(LIBSO)\n'                      >> Makefile
# printf 'PREFIXLIBSOV = $(PREFIX)/lib/$(LIBSOV)\n'                       >> Makefile
# printf 'PREFIXLIBSO  = $(PREFIX)/lib/$(LIBSO)\n'                        >> Makefile
# printf "CC           = $CC\n"                                           >> Makefile
# printf "CFLAGS       = $cflags -I./GRHayL/include\n"                    >> Makefile
# printf "CCOMPILE     = \$(CC) \$(CFLAGS)\n"                             >> Makefile
# printf "CCOMPILEOMP  = \$(CC) \$(CFLAGS)$ompcflag\n"                    >> Makefile
# printf "LD_FLAGS     = $clibs\n"                                        >> Makefile
# printf "SRC          = $srcs\n"                                         >> Makefile
# printf "OBJ          = $objs\n"                                         >> Makefile
# printf "INCS         = $incs\n"                                         >> Makefile
# printf "IHDS         = $ihds\n"                                         >> Makefile
# printf 'INC         := $(INCS) $(IHDS)\n'                               >> Makefile
# printf 'LIBS         = $(BUILDLIBSO)\n'                                 >> Makefile
# if [ "$tests" != "" ]; then
#     printf "TEXES    = $texes\n"      >> Makefile
#     printf "TOBJS    = $tobjs\n"      >> Makefile
#     printf "TEXEOBJS = $texeobjs\n\n" >> Makefile
# fi
# printf '\nall: grhayl tests\n\t@echo "All done!"\n\n' >> Makefile
# printf 'grhayl: $(LIBS)\n\n'                          >> Makefile
# printf 'tests: $(TEXES)\n\n'                          >> Makefile
# if [ $silent -eq 0 ]; then
#     printf '$(BUILDLIBSO): $(BUILDLIBSOV)\n'                                         >> Makefile
#     printf '\trm -f $(BUILDLIBSO) && ln -s $(LIBSOV) $(BUILDLIBSO)\n\n'              >> Makefile
#     printf '$(BUILDLIBSOV): $(OBJ)\n'                                                >> Makefile
#     printf '\t$(CCOMPILE) -fPIC -shared $(OBJ) -o $@ $(LD_FLAGS)\n\n'                >> Makefile
#     printf '$(OBJ): $(BUILDDIR)/%%.o : GRHayL/%%.c $(INC)\n'                         >> Makefile
#     printf '\t$(CCOMPILE) -fPIC -c $< -o $@\n\n'                                     >> Makefile
#     printf 'clean:\n\trm -f $(OBJ) $(TEXES) $(TOBJS) $(BUILDLIBSO) $(BUILDLIBSOV)\n' >> Makefile
#     printf 'realclean: clean\n\trm -rf $(BUILDDIR)\n\trm -f Makefile\n\n'            >> Makefile
#     if [ "$tests" != "" ]; then
#         printf '$(TEXES): test/%%: $(BUILDDIR)/Unit_Tests/%%.o $(TOBJS) $(LIBS)\n'             >> Makefile
#         printf '\t$(CCOMPILEOMP) $(TOBJS) $< -o $@ $(LD_FLAGS) -L$(BUILDDIR)/lib -lgrhayl\n\n' >> Makefile
#         printf '$(TOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                            >> Makefile
#         printf '\t$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
#         printf '$(TEXEOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                         >> Makefile
#         printf '\t$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
#     fi
# else
#     printf '$(BUILDLIBSO): $(BUILDLIBSOV)\n'                             >> Makefile
#     printf '\t@echo "Creating symlink to $@"\n'                          >> Makefile
#     printf '\t@rm -f $(BUILDLIBSO) && ln -s $(LIBSOV) $(BUILDLIBSO)\n\n' >> Makefile
#     printf '$(BUILDLIBSOV): $(OBJ)\n'                                    >> Makefile
#     printf '\t@echo "Linking GRHayL shared library"\n'                   >> Makefile
#     printf '\t@$(CCOMPILE) -fPIC -shared $(OBJ) -o $@ $(LD_FLAGS)\n\n'   >> Makefile
#     printf '$(OBJ): $(BUILDDIR)/%%.o : GRHayL/%%.c $(INC)\n'             >> Makefile
#     printf '\t@echo "Compiling $<"\n'                                    >> Makefile
#     printf '\t@$(CCOMPILE) -fPIC -c $< -o $@\n\n'                        >> Makefile
#     printf 'clean:\n\t@echo "Removing object files"\n'                   >> Makefile
#     printf '\t@rm -f $(OBJ)\n'                                           >> Makefile
#     printf '\t@echo "Removing library files"\n'                          >> Makefile
#     printf '\t@rm -f $(BUILDLIBSO) $(BUILDLIBSOV)\n'                     >> Makefile
#     printf '\t@echo "Removing unit tests"\n'                             >> Makefile
#     printf '\t@rm -f $(TEXES) $(TOBJS)\n\n'                              >> Makefile
#     printf 'realclean: clean\n\t@echo "Removing build directory"\n'      >> Makefile
#     printf '\t@rm -rf $(BUILDDIR)\n'                                     >> Makefile
#     printf '\t@echo "Removing Makefile"\n'                               >> Makefile
#     printf '\t@rm -f Makefile\n\n'                                       >> Makefile
#     if [ "$tests" != "" ]; then
#         printf '$(TEXES): test/%%: $(BUILDDIR)/Unit_Tests/%%.o $(TOBJS) $(LIBS)\n'              >> Makefile
#         printf '\t@echo "Linking $@"\n'                                                         >> Makefile
#         printf '\t@$(CCOMPILEOMP) $(TOBJS) $< -o $@ $(LD_FLAGS) -L$(BUILDDIR)/lib -lgrhayl\n\n' >> Makefile
#         printf '$(TOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                             >> Makefile
#         printf '\t@echo "Compiling $<"\n'                                                       >> Makefile
#         printf '\t@$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
#         printf '$(TEXEOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                          >> Makefile
#         printf '\t@echo "Compiling $<"\n'                                                       >> Makefile
#         printf '\t@$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
#     fi
# fi
# printf 'install: grhayl\n'                                                     >> Makefile
# printf '\t@echo "Installing GRHayL in $(PREFIX)..."\n'                         >> Makefile
# printf '\t@echo "Installing GRHayL headers in $(PREFIX)/include/grhayl"\n'     >> Makefile
# printf '\t@mkdir -p $(PREFIX)/include/grhayl\n'                                >> Makefile
# printf '\t@cp $(IHDS) $(PREFIX)/include/grhayl\n'                              >> Makefile
# printf '\t@echo "Installing GRHayL libraries in $(PREFIX)/lib"\n'              >> Makefile
# printf '\t@mkdir -p $(PREFIX)/lib\n'                                           >> Makefile
# printf '\t@cp -a $(BUILDDIR)/lib/* $(PREFIX)/lib\n\n'                          >> Makefile
# printf 'uninstall:\n'                                                          >> Makefile
# printf '\t@echo "Uninstalling GRHayL from $(PREFIX)..."\n'                     >> Makefile
# printf '\t@echo "Uninstalling GRHayL headers from $(PREFIX)/include/grhayl"\n' >> Makefile
# printf '\t@rm -rf $(PREFIX)/include/grhayl\n'                                  >> Makefile
# printf '\t@echo "Uninstalling GRHayL libraries from $(PREFIX)/lib"\n'          >> Makefile
# printf '\t@rm -rf $(PREFIXLIBSO) $(PREFIXLIBSOV)\n\n'                          >> Makefile
# green "DONE\n"

# tmp=$(printf "$pkg_short configuration finished successfully")
# sep=$(printf "%*s" "${#tmp}" " " | tr " " -)
# printf "%s\n" $sep
# printf "$tmp\n\n"
# printf "%2sConfiguration information\n" " "
# printf "%2s-------------------------\n" " "
# printf "%4s%-19s : %s\n" " " "Version" $pkg_version
# printf "%4s%-19s : %s\n" " " "Installation prefix" $prefix
# printf "%4s%-19s : %s\n" " " "Build directory" $(Realpath $builddir)
# printf "%4s%-19s : %s\n" " " "Build type" $buildtype
# printf "%4s%-19s : %s\n" " " "C compiler flags" "$cflags"
# printf "%4s%-19s : %s\n" " " "C linking flags" "$clibs"
# if [ "$ompcflag" = "" ]; then
#     printf "%4s%-19s : %s\n" " " "OpenMP unit tests" "No"
# else
#     printf "%4s%-19s : %s\n" " " "OpenMP unit tests" "Yes"
# fi
# if [ $silent -eq 0 ]; then
#     printf "%4s%-19s : %s\n" " " "Silent Makefile" "No"
# else
#     printf "%4s%-19s : %s\n" " " "Silent Makefile" "Yes"
# fi
# if [ $usehdf5 -eq 0 ]; then
#     printf "%4s%-19s : %s\n" " " "HDF5 support" "No"
# else
#     printf "%4s%-19s : %s\n" " " "HDF5 support" "Yes"
# fi
# printf "%4s%-19s : " " " "Gems found"
# ./scripts/parser awk "GRHayL/make.code.defn" "subdirs" | awk '{sub(/include /, "", $0); print}'
# printf "%4s%-19s : %s\n" " " "Unit tests found" "$tnames"
# printf "%s\n" $sep
