#!/bin/sh
#
# configure
#
# (c) 2023, Leo Werneck
#
# This is RETINAS's configure script, which is responsible for ensuring users are
# able to compile, test, and install RETINAS on different systems.

pkg="RETINAS"
pkg_short="RETINAS"
pkg_version="1.0.0"
libname="retinas"

red()
{
    printf "\033[1m\033[31m$1\033[0m"
}

green()
{
    printf "\033[1m\033[32m$1\033[0m"
}

blue()
{
    printf "\033[1m\033[34m$1\033[0m"
}

YES()
{
    green "YES"
    if [ $# -eq 1 ]; then
        printf " ($1)\n"
    else
        printf "\n"
    fi
}

NO()
{
    red "NO"
    if [ $# -eq 1 ]; then
        printf " ($1)\n"
    else
        printf "\n"
    fi
}

error()
{
    red "ERROR: "
    printf "$1\n"
    exit 1
}

strip()
{
    ret=$(echo $1 | sed 's/^ *//; s/ *$//')
}

help_message()
{
    cat <<EOF
This is the configuration script for RETINAS
Syntax: ./configure [-h,--help] [-l,--license] [-r,--reconfigure] [-s,--silent]
                    [--prefix=<dir>] [--builddir=<dir>] [--buildtype=<type>]
                    [--with-c] [--without-c] [--with-cuda] [--without-cuda]
                    [--precision=<type>]
                    [--cflags="<flag1> <flag2>..."]
                    [--clibs="<lib1> <lib2>..."]
                    [--cudaflags="<flag1> <flag2>..."]
                    [--cudalibs="<lib1> <lib2>..."]
                    [--fftwdir=<dir>] [--fftwinc=<dir>] [--fftwlib=<dir>]
                    [--blasdir=<dir>] [--blasinc=<dir>] [--blaslib=<dir>]
Options:'
    -h,--help           Print this message and exit
    -l,--license        Print license information and exit
    -r,--reconfigure    Force overwrite of previous configuration
    -s,--silent         Generate a less verbose Makefile
    --prefix            Installation directory
    --builddir          Build directory (default build)
    --buildtype         Build type (default debug-opt). Supported values:
                          <type>     : C compiler flags
                          -----------:------------------
                          nocflags   : None
                          debug      : -Wall -std=c99 -O0 -g
                          debug-opt  : -Wall -std=c99 -march=native -O2 -g
                          opt        : -Wall -std=c99 -march=native -O2
                          production : -Wall -std=c99 -march=native -O3
    --with-c            Compile the C libraries (default)
    --without-c         Do not compile the C libraries
    --with-cuda         Compile the CUDA libraries
    --without-c         Do not compile the CUDA libraries
    --precision         Options are: both (default), single, or double
    --cflags            Additional flags for the C
    --clibs             Additional flags for the C linker
    --cudaflags         Additional flags for the CUDA compiler
    --cudalibs          Additional flags for the CUDA linker
    --fftwdir           Sets the FFTW base directory. Possible values:
                          <dir> : assumes <dir>/include and <dir>/lib exist
                                  (see --fftwinc and --fftwlib if not)
    --fftwinc           Sets the path to the FFTW include directory
    --fftwlib           Sets the path to the FFTW lib directory
    --blasdir           Sets the BLAS base directory. Possible values:
                          <dir> : assumes <dir>/include and <dir>/lib exist
                                  (see --blasinc and --blaslib if not)
    --blasinc           Sets the path to the BLAS include directory
    --blaslib           Sets the path to the BLAS lib directory
EOF
}

check_command()
{
    printf "Checking if command $1 exists... "
    tmp_=$(command -v $1)
    if [ "$tmp_" = "" ]; then
        NO
        eval have_$(printf $1 | tr - _)=0
        return 0
    else
        YES $tmp_
        eval have_$(printf $1 | tr - _)=1
        return 1
    fi
}

compiles()
{
    printf "$5"
    printf "$1" | $2 $3 -x c - $4 >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        YES "$2$3<objs>$4"
        rm -f a.out
        return 0
    fi
    NO "$2$3<objs>$4"
    rm -f a.out
    return 1
}

Realpath()
{
    echo $(cd $(dirname $1); pwd)/$(basename $1) | \
        awk '{gsub(/\/\.\./, "", $0); gsub(/\/\./, "", $0); print}'
}

NL='
'
probe_file()
{
    # Source: https://stackoverflow.com/questions/10346816
    tmp_=$(find $1 2>/dev/null | grep -F $2)
    # Source: https://unix.stackexchange.com/questions/276834
    case $tmp_ in
             "") return 1;;
        *"$NL"*) return 2;;
              *) return 0;;
    esac
}

silent=0
reconfigure=0
prefix="/usr/local"
buildtype="debug-opt"
builddir="build"
precision="both"
with_c=1
with_cuda=0
cflags=""
cudaflags=""
clibs=""
cudalibs=""
fftwdir=""
fftwinc=""
fftwlib=""
blasdir=""
blasinc=""
blaslib=""

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help) help_message; exit;;
        -l|--license)
            if [ -f LICENSE ]; then
                cat LICENSE; exit
            else
                printf "License file (LICENSE) does not exist\n"; exit
            fi
            ;;
        -r|--reconfigure) reconfigure=1;;
        -s|--silent) silent=1;;
        --with-c) with_c=1;;
        --without-c) with_c=0;;
        --with-cuda) with_cuda=1;;
        --without-cuda) with_cuda=0;;
        --prefix=*) prefix=$(echo "$1" | cut -d= -f2);;
        --buildtype=*) buildtype=$(echo "$1" | cut -d= -f2);;
        --precision=*) precision=$(echo "$1" | cut -d= -f2);;
        --builddir=*) builddir=$(echo "$1" | cut -d= -f2);;
        --cflags=*) cflags=$(echo "$1" | cut -d= -f2);;
        --clibs=*) clibs=$(echo "$1" | cut -d= -f2);;
        --cudaflags=*) cudalibs=$(echo "$1" | cut -d= -f2);;
        --cudalibs=*) cudalibs=$(echo "$1" | cut -d= -f2);;
        --fftwdir=*) fftwdir=$(echo "$1" | cut -d= -f2);;
        --fftwinc=*) fftwinc=$(echo "$1" | cut -d= -f2);;
        --fftwlib=*) fftwlib=$(echo "$1" | cut -d= -f2);;
        --blasdir=*) blasdir=$(echo "$1" | cut -d= -f2);;
        --blasinc=*) blasinc=$(echo "$1" | cut -d= -f2);;
        --blaslib=*) blaslib=$(echo "$1" | cut -d= -f2);;
        --prefix) prefix=$2; shift;;
        --buildtype) buildtype=$2; shift;;
        --precision) precision=$2; shift;;
        --builddir) builddir=$2; shift;;
        --cflags) cflags=$2; shift;;
        --clibs) clibs=$2; shift;;
        --cudalibs) cudalibs=$2; shift;;
        --cudalibs) clibs=$2; shift;;
        --fftwdir) fftwdir=$2; shift;;
        --fftwinc) fftwinc=$2; shift;;
        --fftwlib) fftwlib=$2; shift;;
        --blasdir) blasdir=$2; shift;;
        --blasinc) blasinc=$2; shift;;
        --blaslib) blaslib=$2; shift;;
        --) shift; break;;
        -*)
            opt=$1
            opt_length=$(echo "$opt" | awk '{print length}')
            for i in $(seq 2 "$opt_length"); do
                char=$(echo "$opt" | cut -c"$i")
                case $char in
                    h) help_message; exit;;
                    l)
                        if [ -f LICENSE ]; then
                            cat LICENSE; exit
                        else
                            printf "License file (LICENSE) does not exist\n"; exit
                        fi
                        ;;
                    r) reconfigure=1;;
                    s) silent=1;;
                    *) echo "Warning: ignoring unknown option: $char";;
                esac
            done
            ;;
        *) echo "Warning: ignoring unknown option: $1";;
    esac
    shift
done

if [ -f $builddir/.check ] && [ $reconfigure -eq 0 ]; then
    printf "Build directory '$builddir' exists. Stopping configuration.\n"
    printf "Run with -r or --reconfigure to force a new configuration.\n"
    exit 1
fi

printf "Beginning configuration script for $pkg...\n"
printf "Detecting system... "
unames=$(uname -s)
case $unames in
    Linux)  printf "%s\n" $(green "$unames"); break;;
    Darwin) printf "%s\n" $(green "$unames"); break;;
    *) printf "Unsupported system %s\n" $(red "$unames"); exit 1;;
esac

prefix=$(Realpath $prefix)

check_precision()
{
    if [ "$1" = "c" ]; then
        printf "Checking C library precision... "
    elif [ "$1" = "cuda" ]; then
        printf "Checking CUDA library precision... "
    else
        error "check_libs only supports c or cuda as arguments"
    fi

    case $precision in
        both) green "both\n"; break;;
        single) green "single\n"; break;;
        double) green "double\n"; break;;
        *) error "Unsupported precision $precision";;
    esac
}

check_flags()
{
    if [ "$1" == "c" ]; then
        flags="$cflags"
    elif [ "$1" == "cuda" ]; then
        flags="$cudaflags"
    else
        error "check_flags only supports c or cuda as arguments"
    fi

    printf "Checking if additional ${1}flags were provided... "
    if [ "$flags" = "" ]; then
        green "NO\n"
    else
        YES "$flags"
    fi
    strip "$2 $flags"
    flags=$ret
}

check_libs()
{
    if [ "$1" == "c" ]; then
        libs="$clibs"
    elif [ "$1" == "cuda" ]; then
        libs="$cudalibs"
    else
        error "check_libs only supports c or cuda as arguments"
    fi

    printf "Checking if additional ${1}libs were provided... "
    if [ "$libs" = "" ]; then
        green "NO\n"
    else
        YES "$libs"
    fi
    strip "$2 $libs"
    libs=$ret
}

check_compiler()
{
    printf "Checking if compiler $1 exists... "
    tmp_=$(command -v $1)
    if [ "$tmp_" = "" ]; then
        NO
        return 1
    fi
    YES "$tmp_"
    return 0
}

check_compilers()
{
    if [ "$1" == "c" ]; then
        if [ -z $CC ]; then tests="gcc clang icc icx cc"; else tests="$CC"; fi
        msg="Could not find a working C compiler. Please set the environment variable CC."
    elif [ "$1" == "cuda" ]; then
        if [ -z $NVCC ]; then tests="nvcc"; else tests="$NVCC"; fi
        MSG="COULD not find a working CUDA compiler. Please set the environment variable NVCC."
    else
        error "check_compilers only supports c or cuda as arguments"
    fi
    retcc="none"
    for compiler in $tests; do
        check_compiler $compiler
        if [ $? -eq 0 ]; then
            retcc=$compiler
            break;
        fi
    done
    if [ "$retcc" == "none" ]; then
        error "$msg"
    fi
}

check_build_type()
{
    if [ "$1" == "c" ]; then
        printf "Checking if C build type is valid... "
         case $buildtype in
             plain) buildflags=""; break;;
             debug) buildflags="-O0 -g"; break;;
             debug-opt) buildflags="-Wall -std=c99 -march=native -O2 -g"; break;;
             opt) buildflags="-Wall -std=c99 -march=native -O2"; break;;
             production) buildflags="-Wall -std=c99 -march=native -O3"; break;;
             *) printf "%s\nUnsupported built type, use ./configure -h for help\n" $(red $buildtype)
                exit 1;;
         esac
         YES "buildtype: $buildtype; build cflags: $buildflags"
    elif [ "$1" == "cuda" ]; then
        printf "Checking if CUDA build type is valid... "
        case $buildtype in
            plain) buildflags=""; break;;
            debug) buildflags="-O0 -g"; break;;
            debug-opt) buildflags="-Wall -std=c99 -march=native -O2 -g"; break;;
            opt) buildflags="-Wall -std=c99 -march=native -O2"; break;;
            production) buildflags="-Wall -std=c99 -march=native -O3"; break;;
            *) printf "%s\nUnsupported built type, use ./configure -h for help\n" $(red $buildtype)
               exit 1;;
        esac
        YES "buildtype: $buildtype; build cudaflags: $buildflags"
    else
        error "check_build_type only supports c or cuda as arguments"
    fi
}

check_lib()
{
    printf "Checking for $4 library... "
    if [ "$1" = "" ]; then
        if [ "$2" = "" ] && [ "$3" = "" ]; then
            if [ $have_pkg_config -eq 1 ]; then
                printf "using pkg-config... "
                incflags=$(pkg-config $4 --cflags 2>/dev/null)
                libflags=$(pkg-config $4 --libs --static 2>/dev/null)
                if [ "$incflags" != "" ] && [ "$libflags" != "" ]; then
                    green "FOUND\n"
                else
                    NO
                    red "ERROR: "
                    printf "$4 not found with pkg-config\n"
                    printf "Please use ./configure -h for instructions on how to manually\n"
                    printf "specify your $4 installation path.\n"
                    exit 1
                fi
            fi
        elif [ "$2" = "" ] || [ "$3" = "" ]; then
            error "For custom BLAS paths, both --$2 and --$3 must be given\n"
        else
            incflags="-I$2"
            libflags="-L$3 -l$4"
        fi
    else
        if [ ! -d $1 ]; then
            error "$4 directory $1 does not exist"
        fi
        green "USER PROVIDED"
        printf " (incdir: $1/include; libdir: $1/lib)\n"
        incflags="-I${1}/include"
        libflags="-L${1}/lib -l$4"
    fi
}

check_c()
{
    check_precision c
    check_build_type c
    check_flags c "$buildflags"
    cbuildflags=$flags
    check_libs c
    cbuildlibs=$libs
    check_compilers c
    compiler=$retcc

    # Simplest program
    compiles "int main() { return 0; }" $compiler " -O0 " "" "Checking if C compiler works... "
    if [ $? -ne 0 ]; then
        error "The C compiler does not work with the most basic of programs"
    fi

    # Testing libm
    code='
#include <stdio.h>
#include <math.h>

int main() {
  printf("%%.15e\\n", cos(2.3456));
  return 0;
}
'
    compiles "$code" $compiler " -O0 " " -lm" "Checking if C compiler works with -lm linker flag... "
    if [ $? -ne 0 ]; then
        error "The C compiler does not work with libm"
    fi

    check_lib "$blasdir" "$blasinc" "$blaslib" "blas"
    blas_incflags=$incflags
    blas_libflags=$libflags

    if [ "$precision" = "both" ]; then
        blas_test_funcs="cblas_isamax cblas_icamax cblas_idamax cblas_izamax cblas_cgemm cblas_zgemm"
    elif [ "$precision" = "double" ]; then
        blas_test_funcs="cblas_idamax cblas_izamax cblas_zgemm"
    else
        blas_test_funcs="cblas_isamax cblas_icamax cblas_cgemm"
    fi
    # Test blas
    for f in $blas_test_funcs; do
        if [[ "$f" == *"gemm" ]]; then
            code="
#include <stdio.h>
#include <cblas.h>
int main() {
  // Check for cblas_cgemm
  double alpha = 1;
  double beta  = 0;
  $f(CblasRowMajor, CblasNoTrans, CblasNoTrans, 1, 1, 1, &alpha, NULL, 1, NULL, 1, &beta, NULL, 1);
  return 0;
}
"
        else
            code="
#include <stdio.h>
#include <cblas.h>
int main() {
  return $f(1, NULL, 1);
}
"
        fi
        compiles "$code" $compiler " -O0 $blas_incflags " " $blas_libflags" "Checking if blas library supports function $f... "
        if [ $? -ne 0 ]; then
            error "The blas library not support the function $f"
        fi
    done

    if [ "$precision" = "double" ] || [ "$precision" = "both" ]; then
        check_lib "$fftwdir" "$fftwinc" "$fftwlib" "fftw3"
        fftw_incflags=$incflags
        fftw_libflags=$libflags
        code="
#include <stdio.h>
#include <fftw3.h>
int main() {
  int N = 16;
  fftw_complex *in, *out;
  fftw_plan plan;
  in = fftw_alloc_complex(N);
  out = fftw_alloc_complex(N);
  plan = fftw_plan_dft_2d(N, N, in, out, FFTW_FORWARD, FFTW_ESTIMATE);
  for (int i = 0; i < N; i++) {
    in[i][0] = 0.0;
    in[i][1] = 0.0;
  }
  fftw_execute(plan);
  for (int i = 0; i < N; i++)
    printf(\"Output[%d]: %f + %fi\", i, out[i][0], out[i][1]);
  fftw_destroy_plan(plan);
  fftw_free(in);
  fftw_free(out);
  return 0;
}
"
        compiles "$code" $compiler " -O0 $fftw_incflags " " $fftw_libflags" "Checking if fftw3 library supports all needed functions... "
    fi
    if [ "$precision" = "single" ] || [ "$precision" = "both" ]; then
        check_lib "$fftwdir" "$fftwinc" "$fftwlib" "fftw3f"
        fftwf_incflags=$incflags
        fftwf_libflags=$libflags
        code="
#include <stdio.h>
#include <fftw3.h>
int main() {
  int N = 16;
  fftwf_complex *in, *out;
  fftwf_plan plan;
  in = fftwf_alloc_complex(N);
  out = fftwf_alloc_complex(N);
  plan = fftwf_plan_dft_2d(N, N, in, out, FFTW_FORWARD, FFTW_ESTIMATE);
  for (int i = 0; i < N; i++) {
    in[i][0] = 0.0;
    in[i][1] = 0.0;
  }
  fftwf_execute(plan);
  for (int i = 0; i < N; i++)
    printf(\"Output[%d]: %f + %fi\", i, out[i][0], out[i][1]);
  fftwf_destroy_plan(plan);
  fftwf_free(in);
  fftwf_free(out);
  return 0;
}
"
        compiles "$code" $compiler " -O0 $fftwf_incflags " " $fftwf_libflags" "Checking if fftw3f library supports all needed functions... "
    fi
    strip "$cbuildflags $blas_incflags $fftw_incflags"
    cbuildflags=$ret
    strip "$cbuildlibs $blas_libflags"
    cbuildlibs=$ret
}

check_cuda()
{
    check_precision cuda
    check_flags cuda
    check_libs cuda
    check_compilers cuda
    check_build_type cuda
    compiler=$retcc
}

check_command pkg-config
printf "Checking if C library requested... "
if [ $with_c -eq 0 ]; then
    green "NO\n"
else
    YES
    check_c
    cc=$compiler
    ccflags=$cbuildflags
    cclibs=$cbuildlibs
    csrcs=$(find ./retinas/src/cross_correlation_c -name '*.c')
    cincs=$(find ./retinas/src/cross_correlation_c -name '*.h')
    csrcs=$(printf "$csrcs" | sed 's/  */ /; s/^ *//; s/ *$//')
    cincs=$(printf "$cincs" | sed 's/  */ /; s/^ *//; s/ *$//')
    if [ "$precision" = "both" ]; then
        for d in single double; do
            printf "Creating build directory $builddir/$d/cross_correlation_c... "
            mkdir -p $builddir/$d/cross_correlation_c
            green "DONE\n"
        done
        cobjsf=$(printf "$csrcs" | sed "s/\.c/\.o/g; s|retinas/src|$builddir/single|g")
        cobjsd=$(printf "$csrcs" | sed "s/\.c/\.o/g; s|retinas/src|$builddir/double|g")
    elif [ "$precision" = "single" ]; then
        d="single"
        printf "Creating build directory $builddir/$d/cross_correlation_c... "
        mkdir -p $builddir/$d/cross_correlation_c
        green "DONE\n"
        cobjsf=$(printf "$csrcs" | sed "s/\.c/\.o/g; s|retinas/src|$builddir/single|g")
    else
        d="double"
        printf "Creating build directory $builddir/$d/cross_correlation_... "
        mkdir -p $builddir/$d/cross_correlation_c
        green "DONE\n"
        cobjsd=$(printf "$csrcs" | sed "s/\.c/\.o/g; s|retinas/src/|$builddir/double|g")
    fi
fi

printf "Checking if CUDA library requested... "
if [ $with_cuda -eq 1 ]; then YES; check_cuda; else green "NO\n"; fi

printf "Creating directory $builddir/include... "
mkdir -p $builddir/include
green "DONE\n"

printf "Creating directory $builddir/lib... "
mkdir -p $builddir/lib
green "DONE\n"

printf "Generating Makefile... "
rm -f Makefile
printf "# Makefile automatically generated by $pkg's configure script\n" > Makefile
printf "CC            = $cc\n"                                          >> Makefile
printf "CFLAGS        = $cbuildflags\n"                                 >> Makefile
printf "CCOMPILE      = \$(CC) \$(CFLAGS)\n"                            >> Makefile
printf "PREFIX        = $prefix\n"                                       >> Makefile
printf "BUILDDIR      = $builddir\n"                                     >> Makefile
if [ "$precision" = "both" ]; then
    printf "LIBCSOD       = lib${libname}c.so\n"                        >> Makefile
    printf "LIBCSOS       = lib${libname}cf.so\n"                       >> Makefile
    printf 'BUILDCLIBSOD  = $(BUILDDIR)/lib/$(LIBCSOD)\n'               >> Makefile
    printf 'BUILDCLIBSOS  = $(BUILDDIR)/lib/$(LIBCSOS)\n'               >> Makefile
    printf 'PREFIXCLIBSOD = $(PREFIX)/lib/$(LIBCSOD)\n'                 >> Makefile
    printf 'PREFIXCLIBSOS = $(PREFIX)/lib/$(LIBCSOS)\n'                 >> Makefile
    printf "LD_FLAGSD     = $cbuildlibs $fftw_libflags\n"               >> Makefile
    printf "LD_FLAGSS     = $cbuildlibs $fftwf_libflags\n"              >> Makefile
    printf "COBJD         = " >> Makefile; echo $cobjsd                 >> Makefile
    printf "COBJS         = " >> Makefile; echo $cobjsf                 >> Makefile
elif [ "$precision" = "single" ]; then
    printf "LIBCSOS       = lib${libname}cf.so\n"                       >> Makefile
    printf 'BUILDLIBCSOS  = $(BUILDDIR)/lib/$(LIBCSOS)\n'               >> Makefile
    printf 'PREFIXCLIBSOS = $(PREFIX)/lib/$(LIBCSOS)\n'                 >> Makefile
    printf "LD_FLAGSS     = $cbuildlibs $fftwf_libflags\n"              >> Makefile
    printf "COBJS         = " >> Makefile; echo $cobjsf                 >> Makefile
else
    printf "LIBCSOD       = lib${libname}c.so\n"                        >> Makefile
    printf 'BUILDLIBCSOD  = $(BUILDDIR)/lib/$(LIBCSOD)\n'               >> Makefile
    printf 'PREFIXCLIBSOD = $(PREFIX)/lib/$(LIBCSOD)\n'                 >> Makefile
    printf "LD_FLAGSD     = $cbuildlibs $fftw_libflags\n"               >> Makefile
    printf "COBJD         = " >> Makefile; echo $cobjsd                 >> Makefile
fi
printf "CSRC          = " >> Makefile; echo $csrcs                      >> Makefile
printf "CINC          = " >> Makefile; echo $cincs                      >> Makefile
printf '\nall: $(BUILDCLIBSOD) $(BUILDCLIBSOS)\n\n'                     >> Makefile
printf '$(BUILDCLIBSOD): $(COBJD)\n'                                    >> Makefile
printf '\t$(CCOMPILE) -fPIC -shared $(COBJD) -o $@ $(LD_FLAGSD)\n\n'    >> Makefile
printf '$(BUILDCLIBSOS): $(COBJS)\n'                                    >> Makefile
printf '\t$(CCOMPILE) -fPIC -shared $(COBJS) -o $@ $(LD_FLAGSS)\n\n'    >> Makefile
printf '$(COBJD): $(BUILDDIR)/double/%%.o : retinas/src/%%.c $(CINC)\n' >> Makefile
printf '\t$(CCOMPILE) -fPIC -c -DPRECISION=1 $< -o $@\n\n'              >> Makefile
printf '$(COBJS): $(BUILDDIR)/single/%%.o : retinas/src/%%.c $(CINC)\n' >> Makefile
printf '\t$(CCOMPILE) -fPIC -c -DPRECISION=0 $< -o $@\n\n'              >> Makefile
printf 'clean:\n'                                                       >> Makefile
printf '\trm -f $(COBJD) $(COBJS) $(BUILDCLIBSOD) $(BUILDCLIBSOS)\n\n'  >> Makefile
printf 'realclean: clean\n'                                             >> Makefile
printf '\trm -rf build Makefile\n\n'                                    >> Makefile

# printf '\nall: grhayl tests\n\t@echo "All done!"\n\n' >> Makefile
# printf 'grhayl: $(LIBS)\n\n'                          >> Makefile
# printf 'tests: $(TEXES)\n\n'                          >> Makefile
# if [ $silent -eq 0 ]; then
#     printf '$(BUILDLIBSO): $(BUILDLIBSOV)\n'                                         >> Makefile
#     printf '\trm -f $(BUILDLIBSO) && ln -s $(LIBSOV) $(BUILDLIBSO)\n\n'              >> Makefile
#     printf '$(BUILDLIBSOV): $(OBJ)\n'                                                >> Makefile
#     printf '\t$(CCOMPILE) -fPIC -shared $(OBJ) -o $@ $(LD_FLAGS)\n\n'                >> Makefile
#     printf '$(OBJ): $(BUILDDIR)/%%.o : RETINAS/%%.c $(INC)\n'                         >> Makefile
#     printf '\t$(CCOMPILE) -fPIC -c $< -o $@\n\n'                                     >> Makefile
#     printf 'clean:\n\trm -f $(OBJ) $(TEXES) $(TOBJS) $(BUILDLIBSO) $(BUILDLIBSOV)\n' >> Makefile
#     printf 'realclean: clean\n\trm -rf $(BUILDDIR)\n\trm -f Makefile\n\n'            >> Makefile
#     if [ "$tests" != "" ]; then
#         printf '$(TEXES): test/%%: $(BUILDDIR)/Unit_Tests/%%.o $(TOBJS) $(LIBS)\n'             >> Makefile
#         printf '\t$(CCOMPILEOMP) $(TOBJS) $< -o $@ $(LD_FLAGS) -L$(BUILDDIR)/lib -lgrhayl\n\n' >> Makefile
#         printf '$(TOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                            >> Makefile
#         printf '\t$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
#         printf '$(TEXEOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                         >> Makefile
#         printf '\t$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
#     fi
# else
#     printf '$(BUILDLIBSO): $(BUILDLIBSOV)\n'                             >> Makefile
#     printf '\t@echo "Creating symlink to $@"\n'                          >> Makefile
#     printf '\t@rm -f $(BUILDLIBSO) && ln -s $(LIBSOV) $(BUILDLIBSO)\n\n' >> Makefile
#     printf '$(BUILDLIBSOV): $(OBJ)\n'                                    >> Makefile
#     printf '\t@echo "Linking RETINAS shared library"\n'                   >> Makefile
#     printf '\t@$(CCOMPILE) -fPIC -shared $(OBJ) -o $@ $(LD_FLAGS)\n\n'   >> Makefile
#     printf '$(OBJ): $(BUILDDIR)/%%.o : RETINAS/%%.c $(INC)\n'             >> Makefile
#     printf '\t@echo "Compiling $<"\n'                                    >> Makefile
#     printf '\t@$(CCOMPILE) -fPIC -c $< -o $@\n\n'                        >> Makefile
#     printf 'clean:\n\t@echo "Removing object files"\n'                   >> Makefile
#     printf '\t@rm -f $(OBJ)\n'                                           >> Makefile
#     printf '\t@echo "Removing library files"\n'                          >> Makefile
#     printf '\t@rm -f $(BUILDLIBSO) $(BUILDLIBSOV)\n'                     >> Makefile
#     printf '\t@echo "Removing unit tests"\n'                             >> Makefile
#     printf '\t@rm -f $(TEXES) $(TOBJS)\n\n'                              >> Makefile
#     printf 'realclean: clean\n\t@echo "Removing build directory"\n'      >> Makefile
#     printf '\t@rm -rf $(BUILDDIR)\n'                                     >> Makefile
#     printf '\t@echo "Removing Makefile"\n'                               >> Makefile
#     printf '\t@rm -f Makefile\n\n'                                       >> Makefile
#     if [ "$tests" != "" ]; then
#         printf '$(TEXES): test/%%: $(BUILDDIR)/Unit_Tests/%%.o $(TOBJS) $(LIBS)\n'              >> Makefile
#         printf '\t@echo "Linking $@"\n'                                                         >> Makefile
#         printf '\t@$(CCOMPILEOMP) $(TOBJS) $< -o $@ $(LD_FLAGS) -L$(BUILDDIR)/lib -lgrhayl\n\n' >> Makefile
#         printf '$(TOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                             >> Makefile
#         printf '\t@echo "Compiling $<"\n'                                                       >> Makefile
#         printf '\t@$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
#         printf '$(TEXEOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                          >> Makefile
#         printf '\t@echo "Compiling $<"\n'                                                       >> Makefile
#         printf '\t@$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
#     fi
# fi
# printf 'install: grhayl\n'                                                     >> Makefile
# printf '\t@echo "Installing RETINAS in $(PREFIX)..."\n'                         >> Makefile
# printf '\t@echo "Installing RETINAS headers in $(PREFIX)/include/grhayl"\n'     >> Makefile
# printf '\t@mkdir -p $(PREFIX)/include/grhayl\n'                                >> Makefile
# printf '\t@cp $(IHDS) $(PREFIX)/include/grhayl\n'                              >> Makefile
# printf '\t@echo "Installing RETINAS libraries in $(PREFIX)/lib"\n'              >> Makefile
# printf '\t@mkdir -p $(PREFIX)/lib\n'                                           >> Makefile
# printf '\t@cp -a $(BUILDDIR)/lib/* $(PREFIX)/lib\n\n'                          >> Makefile
# printf 'uninstall:\n'                                                          >> Makefile
# printf '\t@echo "Uninstalling RETINAS from $(PREFIX)..."\n'                     >> Makefile
# printf '\t@echo "Uninstalling RETINAS headers from $(PREFIX)/include/grhayl"\n' >> Makefile
# printf '\t@rm -rf $(PREFIX)/include/grhayl\n'                                  >> Makefile
# printf '\t@echo "Uninstalling RETINAS libraries from $(PREFIX)/lib"\n'          >> Makefile
# printf '\t@rm -rf $(PREFIXLIBSO) $(PREFIXLIBSOV)\n\n'                          >> Makefile
# green "DONE\n"

tmp=$(printf "$pkg_short configuration finished successfully")
sep=$(printf "%*s" "${#tmp}" " " | tr " " -)
printf "%s\n" $sep
printf "$tmp\n\n"
printf "%2sConfiguration information\n" " "
printf "%2s-------------------------\n" " "
printf "%4s%-21s : %s\n" " " "Version" $pkg_version
printf "%4s%-21s : %s\n" " " "Installation prefix" $prefix
printf "%4s%-21s : %s\n" " " "Build directory" $(Realpath $builddir)
if [ $silent -eq 0 ]; then
    printf "%4s%-21s : %s\n" " " "Silent Makefile" "No"
else
    printf "%4s%-21s : %s\n" " " "Silent Makefile" "Yes"
fi
printf "%4s%-21s : " " " "Build C library?"
if [ $with_c -eq 0 ]; then
    echo "No"
else
    echo "Yes"
    printf "%6s%-19s : %s\n" " " "C build type" $buildtype
    printf "%6s%-19s : %s\n" " " "C compiler flags" "$ccflags"
    printf "%6s%-19s : %s\n" " " "C linking flags" "$cclibs"
    printf "%6s%-19s : %s\n" " " "C library precision" $precision
fi
printf "%4s%-21s : " " " "Build CUDA library?"
if [ $with_cuda -eq 0 ]; then
    echo "No"
else
    echo "Yes"
    printf "%6s%-19s : %s\n" " " "CUDA build type" $buildtype
    printf "%6s%-19s : %s\n" " " "CUDA compiler flags" "$nvccflags"
    printf "%6s%-19s : %s\n" " " "CUDA linking flags" "$nvcclibs"
    printf "%6s%-19s : %s\n" " " "CUDA library precision" $precision
fi
printf "%s\n" $sep
